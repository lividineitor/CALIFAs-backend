/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tsis.proyecto.api;

import tsis.proyecto.api.dto.ColaDto;
import tsis.proyecto.api.dto.ColaIdTurnosBody;
import tsis.proyecto.api.dto.Error;
import tsis.proyecto.api.dto.InlineResponse200;
import tsis.proyecto.api.dto.JuegosDto;
import tsis.proyecto.api.dto.InlineResponse2003;
import tsis.proyecto.api.dto.InlineResponse2004;
import tsis.proyecto.api.dto.JuegoDto;
import tsis.proyecto.api.dto.JuegosJuegoIdBody;
import tsis.proyecto.api.dto.LoginDto;
import tsis.proyecto.api.dto.PptDto;
import tsis.proyecto.api.dto.PptsDto;
import tsis.proyecto.api.dto.PptsJuegoIdBody;
import tsis.proyecto.api.dto.PreferenciaDto;
import tsis.proyecto.api.dto.PreferenciasPreferenciasIdBody;
import tsis.proyecto.api.dto.TokenDto;
import tsis.proyecto.api.dto.TurnoDto;
import tsis.proyecto.api.dto.TurnosTurnoIdBody;
import tsis.proyecto.api.dto.UsuarioDto;
import tsis.proyecto.api.dto.UsuariosUsuarioIdBody;
import tsis.proyecto.api.dto.V1JuegosBody;
import tsis.proyecto.api.dto.V1PptsBody;
import tsis.proyecto.api.dto.V1TurnosBody;
import tsis.proyecto.api.dto.V1UsuariosBody;
import tsis.proyecto.negocio.modelo.Ppt;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-05T21:21:27.284150-05:00[America/Mexico_City]")
@Validated
public interface V1Api {

    @Operation(summary = "Permite mandar acciones al juego.", description = "Manda acciones al juego.", tags={ "ppts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Acción realizada con éxito."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró el juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/ppts/{pptId}",
        method = RequestMethod.POST)
    ResponseEntity<PptDto> actionPpt(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Usuario que realiza acción." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "usuarioId", required = true) Long usuarioId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Acción a realizar (\"eleccion\" , \"continuar\")." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "action", required = true) String action, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Lo que el usuario eligió(Para \"eleccion\": \"piedra\", \"papel\" o \"tijeras\"; para \"continuar\": \"true\" o \"false\")." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "eleccion", required = true) String eleccion, @Parameter(in = ParameterIn.PATH, description = "El id del juego.", required=true, schema=@Schema()) @PathVariable("pptId") Long pptId);


    @Operation(summary = "Envia los movimientos del jugador al juego.", description = "Envía las diferentes acciones al juego, con sus respectivas elecciones.", tags={ "volados" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Acción ejecutada correctamente."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Elementos no encontrados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "aplication/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/volados/{juegoId}",
        produces = { "application/json", "aplication/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> actionVolados(@Parameter(in = ParameterIn.PATH, description = "Identificador del juego.", required=true, schema=@Schema()) @PathVariable("juegoId") Integer juegoId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Identificador del usuario." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "usuarioId", required = true) Integer usuarioId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Eleccion del jugador en la partida." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "eleccion", required = true) String eleccion, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Accion que toma el jugador." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "accion", required = true) Boolean accion);


    @Operation(summary = "Crea una nueva cola.", description = "Crea una nueva cola para manejar a los usuarios activos del sistema.", tags={ "colas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ColaDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "409", description = "La cola ya existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/colas",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ColaDto> createCola();


    @Operation(summary = "Permite dar de alta un juego.", description = "Permite dar de alta un juego.", tags={ "juegos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa del juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JuegoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró el juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/juegos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<JuegoDto> createJuego(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Map<String,Object> body);


    @Operation(summary = "Permite crear una instancia de ppt.", description = "Crea una instancia del juego.", tags={ "ppts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa del juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PptDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/ppts",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PptDto> createPpt(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Map <String,Object> body);


    @Operation(summary = "Permite dar de alta un turno.", description = "Permite dar de alta un turno.", tags={ "turnos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TurnoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "409", description = "La lista de turnos ya existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/turnos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TurnoDto> createTurno(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody V1TurnosBody body);


    @Operation(summary = "Da de alta un usuario.", description = "Permite dar de alta un usuario, se valida que dicho usuario no haya sido dado de alta previamente con el mismo correo. Regresa un objeto usuarioDto.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "409", description = "El usuario ya existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UsuarioDto> createUsuario(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UsuarioDto body);


    @Operation(summary = "Elimina todas las colas del sistema.", description = "Elimina todas las colas del sistema y sus datos.", tags={ "colas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se eliminaron todas las colas."),
        
        @ApiResponse(responseCode = "204", description = "Se eliminaron todas las colas."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Colas no encontradas.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/colas",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteColas();


    @Operation(summary = "Permite borrar un juego a partir de su id.", description = "", tags={ "juegos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Se elimino exitosamente el juego."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/juegos/{juegoId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteJuego(@Parameter(in = ParameterIn.PATH, description = "El id del juego.", required=true, schema=@Schema()) @PathVariable("juegoId") Integer juegoId);


    @Operation(summary = "Permite borrar un juego a partir de su id.", description = "", tags={ "ppts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Se elimino exitosamente el juego."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/ppts/{pptId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePpt(@Parameter(in = ParameterIn.PATH, description = "El id del juego.", required=true, schema=@Schema()) @PathVariable("pptId") Long pptId);


    @Operation(summary = "Permite borrar todas las instancias de ppt.", description = "", tags={ "ppts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Se eliminaron exitosamente todas las instancias."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/ppts",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePpts();


    @Operation(summary = "Permite eliminar un turno por su id.", description = "Elimina un turno del sistema.", tags={ "turnos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Se eliminó exitosamente el turno."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/turnos/{turnoId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTurno(@Parameter(in = ParameterIn.PATH, description = "El id del turno del usuario.", required=true, schema=@Schema()) @PathVariable("turnoId") Integer turnoId);


    @Operation(summary = "Permite eliminar todos los turnos.", description = "Permite eliminar todos los turnos para limpiar la cola.", tags={ "turnos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Se eliminó exitosamente la lista de turnos."),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/turnos",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTurnos();


    @Operation(summary = "Elimina un usuario.", description = "Elimina a un usuario del sistema.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se eliminó exitosamente al usuario."),
        
        @ApiResponse(responseCode = "204", description = "Se eliminó exitosamente al usuario."),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios/{usuarioId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUsuario(@Parameter(in = ParameterIn.PATH, description = "El id del usuario.", required=true, schema=@Schema()) @PathVariable("usuarioId") Integer usuarioId);


    @Operation(summary = "Permite validar si un usuario existe en el sistema.", description = "Regresa un objeto que contiene la llave temporal del usuario.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TokenDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Consulta mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Login fallido.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El usuario no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios/login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TokenDto> existUsuario(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LoginDto body);

    @Operation(summary = "Permite recuperar todos los juegos del sistema.", description = "Regresa un arreglo que contiene todos los juegos del sistema.", tags={ "juegos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el catálogo de juegos.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JuegosDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/juegos/catalogo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JuegosDto> getCatalogo();

    @Operation(summary = "Recupera todas las colas del sistema.", description = "Regresa un arreglo de objetos colaDto que contiene el catálogo de colas del sistema.", tags={ "colas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2003.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Elementos no encontrados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/colas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2003> getColas();


    @Operation(summary = "Permite recuperar un juego a partir de su id.", description = "Regresa un objeto que contiene el juego.", tags={ "juegos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JuegoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/juegos/{juegoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JuegoDto> getJuego(@Parameter(in = ParameterIn.PATH, description = "El id del juego.", required=true, schema=@Schema()) @PathVariable("juegoId") Integer juegoId);


    @Operation(summary = "Permite recuperar todos los juegos del sistema.", description = "Regresa un arreglo que contiene todos los juegos del sistema.", tags={ "juegos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el catálogo de juegos.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JuegosDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/juegos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JuegosDto> getJuegos();


    @Operation(summary = "Permite recuperar una instancia \"Piedra, papel o tijeras\" a partir de su id.", description = "Regresa un objeto que contiene un pptDto del juego.", tags={ "ppts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PptDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/ppts/{pptId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PptDto> getPpt(@Parameter(in = ParameterIn.PATH, description = "El id del juego.", required=true, schema=@Schema()) @PathVariable("pptId") Long pptId);


    @Operation(summary = "Permite recuperar todas las instancias de \"Piedra, papel o tijeras\".", description = "Regresa un objeto que contiene un arreglo de pptDto del juego.", tags={ "ppts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PptsDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/ppts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PptsDto> getPpts();


    @Operation(summary = "Obtiene las configuraciones establecidas en el sistema.", description = "Muestra como está establecido el sistema.", tags={ "preferencias" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PreferenciaDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Elementos no encontrados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/preferencias",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PreferenciaDto> getPreferencias();


    @Operation(summary = "Permite obtener un turno por su id.", description = "Regresa un objeto que contiene un turnoDto del juego.", tags={ "turnos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el turno.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TurnoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/turnos/{turnoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TurnoDto> getTurno(@Parameter(in = ParameterIn.PATH, description = "El id del turno del usuario.", required=true, schema=@Schema()) @PathVariable("turnoId") Integer turnoId);


    @Operation(summary = "Permite recuperar la lista de todos los turnos de los juegos.", description = "Regresa la lista de todos los turnos.", tags={ "turnos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2004.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Elementos no encontrados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/turnos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2004> getTurnos();


    @Operation(summary = "Recupera a un usuario.", description = "Regresa un objeto que contiene a un usuario del sistema.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Consulta mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios/{usuarioId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UsuarioDto> getUsuario(@Parameter(in = ParameterIn.PATH, description = "El id del usuario.", required=true, schema=@Schema()) @PathVariable("usuarioId") Long usuarioId);


    @Operation(summary = "Recupera a todos los usuarios del sistema.", description = "Regresa un arreglo de objetos usuarioDto que contiene el catálogo de usuarios del sistema.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Elementos no encontrados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getUsuarios();


    @Operation(summary = "Cierra la sesión.", description = "Regresa una confirmación.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Logout exitosa."),
        
        @ApiResponse(responseCode = "400", description = "Consulta mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
                
        @ApiResponse(responseCode = "404", description = "El usuario no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios/logout",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> logout(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Map<String,Object> body);
    
    
    @Operation(summary = "Permite actualizar un juego a partir de su id.", description = "Actualiza los datos del juego, excepto el id.", tags={ "juegos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se actualizó exitosamente el juego.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JuegoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "No implementado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/juegos/{juegoId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<JuegoDto> updateJuego(@Parameter(in = ParameterIn.PATH, description = "El id del juego.", required=true, schema=@Schema()) @PathVariable("juegoId") Integer juegoId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody JuegosJuegoIdBody body);


    @Operation(summary = "Modifica uno o varios atributos del sistema.", description = "Actualiza cualquier configuración del sistema.", tags={ "preferencias" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa."),
        
        @ApiResponse(responseCode = "400", description = "Petición mal formada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Preferencia no encontrada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/preferencias/{preferenciasId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updatePreferencias(@Parameter(in = ParameterIn.PATH, description = "El id de la preferencia.", required=true, schema=@Schema()) @PathVariable("preferenciasId") Integer preferenciasId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody PreferenciasPreferenciasIdBody body);


    @Operation(summary = "Permite modificar un turno utilizando su id.", description = "Modifica un turno y regresa un turnoDto con los datos modificados.", tags={ "turnos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se modificó exitosamente el turno.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TurnoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/turnos/{turnoId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<TurnoDto> updateTurno(@Parameter(in = ParameterIn.PATH, description = "El id del turno del usuario.", required=true, schema=@Schema()) @PathVariable("turnoId") Integer turnoId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody TurnosTurnoIdBody body);


    @Operation(summary = "Modifica a un usuario.", description = "Actualiza cualquier dato de un usuario del sistema, menos su identificador.", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa."),
        
        @ApiResponse(responseCode = "400", description = "Petición mal formada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "501", description = "Operación no implementada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/usuarios/{usuarioId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateUsuario(@Parameter(in = ParameterIn.PATH, description = "El id del usuario.", required=true, schema=@Schema()) @PathVariable("usuarioId") Integer usuarioId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UsuariosUsuarioIdBody body);


    @Operation(summary = "Administra a los usuarios a la cola.", description = "", tags={ "colas" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud mal construida.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "409", description = "El usuario ya existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/colas/{colaId}/turnos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UsuarioDto> v1ColasColaIdTurnosPost(@Parameter(in = ParameterIn.PATH, description = "El id del usuario.", required=true, schema=@Schema()) @PathVariable("colaId") Integer colaId, @Parameter(in = ParameterIn.QUERY, description = "Id del usuario." ,schema=@Schema()) @Valid @RequestParam(value = "usuarioId", required = false) Integer usuarioId, @Parameter(in = ParameterIn.QUERY, description = "Añade(add), elimina(delete) o modifica(update) un turno a la cola." ,schema=@Schema()) @Valid @RequestParam(value = "action", required = false) String action, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ColaIdTurnosBody body);

}

